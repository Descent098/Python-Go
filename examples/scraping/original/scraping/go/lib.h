/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "lib.go"

#include <stdlib.h>

typedef struct{
	char* url;
	char* domain;
	char* server;
	char* protocol;
	char* contentType;
	char* body;
	int port;
} Site;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// C-callable wrapper that parses multiple URLs and returns C structs
//
// # Parameters
//
//	cUrls (**C.char): An array of C strings (URLs)
//	cCount (C.int): The number of URLs
//
// # Returns
//
//	*C.Site: A pointer to the first element of an array of C.Site structs
//
extern __declspec(dllexport) Site* parse_urls(char** cUrls, int cCount);

// C-callable wrapper to scrape a single URL
//
// # Parameters
//
//	cUrl (*C.char): A single URL string
//
// # Returns
//
//	*C.Site: A pointer to a C.Site struct with metadata, or nil on error
//
extern __declspec(dllexport) Site* scrape_single_url(char* cUrl);

// Releases memory allocated for a single C.Site struct
//
// # Parameters
//
//	site (*C.Site): A pointer to the C.Site struct to free
//
extern __declspec(dllexport) void free_site(Site* site);

// Releases memory allocated for an array of C.Site structs
//
// # Parameters
//
//	sites (*C.Site): A pointer to the first element in a C.Site array
//	count (C.int): The number of elements in the array
//
extern __declspec(dllexport) void free_sites(Site* sites, int count);

#ifdef __cplusplus
}
#endif
