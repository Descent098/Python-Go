/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/Descent098/cgo-python-helpers */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 51 "lib.go"

#include <stdlib.h>

typedef struct{
	int numberOfElements;
	char** data;
} StringArrayResult;

typedef struct {
    int numberOfElements;
    int* data;
} IntArrayResult;

typedef struct {
    int numberOfElements;
    float* data;
} FloatArrayResult;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Used to convert a C-compatible string back to itself, good for debugging encoding issues
//
// Parameters:
//   - cString: Pointer to the C string (*C.char).
//
// Returns:
//   - Pointer to a new C string with the same content (*C.char).
//     Note: The caller is responsible for freeing the allocated memory using FreeCString.
//
extern __declspec(dllexport) void* return_string(void* cString);

// Used to convert a C-compatible string array to wrapper type
//
// Parameters:
//   - cArray: Pointer to the C array of strings (**C.char).
//   - numberOfStrings: Number of strings in the C array.
//
// Returns:
//   - Pointer to a C.StringArrayResult containing the converted strings (*C.StringArrayResult).
//     Note: The caller is responsible for freeing the allocated memory using free_string_array_result.
//
extern __declspec(dllexport) StringArrayResult* return_string_array(void* cArray, GoInt numberOfStrings);

// Used to convert a C-compatible integer array to wrapper type
//
// Parameters:
//   - cArray: Pointer to the C array of integers (*C.int).
//   - numberOfElements: Number of elements in the C array.
//
// Returns:
//   - Pointer to a C.IntArrayResult containing the converted integers (*C.IntArrayResult).
//     Note: The caller is responsible for freeing the allocated memory using free_int_array_result.
//
extern __declspec(dllexport) IntArrayResult* return_int_array(void* cArray, int numberOfElements);

// Used to convert a C-compatible float array to wrapper type
//
// Parameters:
//   - cArray: Pointer to the C array of floats(*C.float).
//   - numberOfElements: Number of elements in the C array.
//
// Returns:
//   - Pointer to a C.FloatArrayResult containing the converted floats (*C.FloatArrayResult).
//     Note: The caller is responsible for freeing the allocated memory using free_float_array_result.
//
extern __declspec(dllexport) FloatArrayResult* return_float_array(void* cArray, int numberOfElements);

// Prints the go representation of a C string, good for debugging encoding issues
//
// Parameters:
//   - ptr: Pointer to the C string (*C.char).
//
extern __declspec(dllexport) void print_string(void* ptr);

// Prints the go representation of an array, good for debugging encoding issues
//
// Parameters:
//   - cArray: Pointer to the C array of strings (**C.char).
//   - numberOfString: Number of strings in the C array.
//
extern __declspec(dllexport) void print_string_array(void* cArray, GoInt numberOfString);

// Prints the go representation of an array, good for debugging rounding/conversion issues
//
// Parameters:
//   - cArray: Pointer to the C array of integers (*C.int).
//   - numberOfInts: Number of integers in the C array.
//
extern __declspec(dllexport) void print_int_array(void* cArray, GoInt numberOfInts);

// Prints the go representation of an array, good for debugging rounding/conversion issues
//
// Parameters:
//   - cArray: Pointer to the C array of floats (*C.float).
//   - numberOfFloats: Number of floats in the C array.
//
extern __declspec(dllexport) void print_float_array(void* cArray, GoInt numberOfFloats);

// Free a previously allocated C string from Go.
//
// Parameters:
//   - ptr: Pointer to the C string to be freed (*C.char).
//
extern __declspec(dllexport) void FreeCString(void* ptr);

// Free a StringArrayResult allocated by StringSliceToCArray.
//
// Parameters:
//   - result: Pointer to the C.StringArrayResult to be freed (**C.char).
//
extern __declspec(dllexport) void FreeStringArray(void* inputArray, int count);

// Free an *C.int.
//
// Parameters:
//   - result: Pointer to the *C.int to be freed.
//
extern __declspec(dllexport) void FreeIntArray(void* ptr);

// Free a *C.float.
//
// Parameters:
//   - result: Pointer to the C.FloatArrayResult to be freed (*C.float).
//
extern __declspec(dllexport) void FreeFloatArray(void* ptr);

// Free a *C.StringArrayResult.
//
// Parameters:
//   - result: Pointer to the C.StringArrayResult to be freed (*C.StringArrayResult).
//
extern __declspec(dllexport) void free_string_array_result(void* StringArrayResultReference);

// Free a *C.IntArrayResult.
//
// Parameters:
//   - result: Pointer to the C.IntArrayResult to be freed (*C.IntArrayResult).
//
extern __declspec(dllexport) void free_int_array_result(void* ptr);

// Free a *C.FloatArrayResult.
//
// Parameters:
//   - result: Pointer to the C.FloatArrayResult to be freed (*C.FloatArrayResult).
//
extern __declspec(dllexport) void free_float_array_result(void* ptr);

#ifdef __cplusplus
}
#endif
